name: Tests

on:
  pull_request:
    branches:
      - main
      - dev
      - "maintain/*"
    paths-ignore:
      - "docs/**"
      - "news/**"
      - "*.md"
      - Dockerfile
      - tasks/benchmarks/**
  push:
    branches:
      - main
      - dev
      - "maintain/*"
    paths-ignore:
      - "docs/**"
      - "news/**"
      - "*.md"
      - Dockerfile
      - tasks/benchmarks/**

concurrency:
  group: ${{ github.event.number || github.run_id }}
  cancel-in-progress: true

jobs:
  Testing:
    env:
      PYTHONDEVMODE: 1
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12", 3.13]
        os: [ubuntu-latest, windows-latest, macos-latest]
        install-via: [pip]
        include:
          - python-version: "3.11"
            os: ubuntu-latest
            install-via: script
          - python-version: "3.8"
            os: macos-13
            install-via: pip
          - python-version: "3.9"
            os: macos-13
            install-via: pip
        exclude:
          - python-version: "3.8"
            os: macos-latest
            install-via: pip
          - python-version: "3.9"
            os: macos-latest
            install-via: pip
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python Versions
        uses: actions/setup-python@v5
        with:
          python-version: |
            3.7
            3.8
            3.9
            3.10
            3.11
            3.12
        if: matrix.os != 'macos-latest'
      - name: Setup Python Versions
        uses: actions/setup-python@v5
        with:
          python-version: |
            3.10
            3.11
            3.12
        if: matrix.os == 'macos-latest'
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          allow-prereleases: true

      - name: Cache venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pdm.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ matrix.python-version }}-
      - name: Install current PDM via pip
        if: matrix.install-via == 'pip'
        run: python -m pip install -U .
      - name: Install current PDM via script
        if: matrix.install-via == 'script'
        run: |
          python -m pip install click
          python install-pdm.py --version head
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install Dev Dependencies
        run: |
          python -m pip install -U setuptools
          pdm install -v -dGtest
          pdm run pip install -U setuptools
          pdm info
      - name: Run Tests
        run: pdm run pytest -n auto --cov=pdm --cov-config=pyproject.toml --cov-report=xml tests

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests

  Pack:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Install PDM
        run: |
          python -m pip install .
          pdm self add pdm-packer
      - name: Pack pdm
        run: pdm pack

      - name: Test zipapp
        run: python pdm.pyz --version
